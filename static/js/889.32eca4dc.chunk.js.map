{"version":3,"file":"static/js/889.32eca4dc.chunk.js","mappings":"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","sources":["components/Messages/AddMessageForm/AddMessageForm.tsx","webpack://socialnetwork/./src/components/Messages/DialogItem/DialogItem.module.css?ca70","components/Messages/DialogItem/DialogItem.tsx","webpack://socialnetwork/./src/components/Messages/MessagesItem/MessagesItem.module.css?b9b7","components/Messages/MessagesItem/MessagesItem.tsx","webpack://socialnetwork/./src/components/Messages/Messages.module.scss?b126","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx","hoc/withAuthRedirect.tsx","utils/selectors/selectors.tsx"],"sourcesContent":["import { FC, ReactElement } from 'react';\n\nimport { TextField } from '@mui/material';\nimport { useFormik } from 'formik';\n\nimport { Button } from 'components/comonComponents/Button/Button';\n\nexport type MessageFormikInputType = {\n  message: string;\n};\n\ntype AddMessageFormPropsType = {\n  addNewMessageHandle: (data: MessageFormikInputType) => void;\n};\n\nexport const AddMessageForm: FC<AddMessageFormPropsType> = ({\n  addNewMessageHandle,\n}): ReactElement => {\n  const formik = useFormik({\n    initialValues: {\n      message: '',\n    },\n    onSubmit: values => {\n      addNewMessageHandle(values);\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <TextField\n        id=\"message\"\n        name=\"message\"\n        label=\"Enter text\"\n        type=\"text\"\n        variant=\"standard\"\n        onChange={formik.handleChange}\n        value={formik.values.message}\n      />\n      <Button name=\"Add\" type=\"submit\" />\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__Ozc-c\",\"navLink\":\"DialogItem_navLink__Dzr-R\"};","import React, { memo } from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport style from './DialogItem.module.css';\n\nexport type DialogPT = {\n  id: number;\n  name: string;\n  ava: string;\n};\n\nexport const DialogItem = memo((props: DialogPT) => (\n  <div className={style.dialog}>\n    <img alt=\"ava\" src={props.ava} title={props.name} id={props.id.toString()} />\n    <NavLink className={style.navLink} to={`/messages/${props.id}`}>\n      {' '}\n      {props.name}{' '}\n    </NavLink>\n  </div>\n));\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessagesItem_message__s7hNw\"};","import { memo } from 'react';\n\nimport style from './MessagesItem.module.css';\n\nexport type MessagePT = {\n  id: number;\n  text: string;\n};\n\nexport const MessagesItem = memo((props: MessagePT) => (\n  <div id={props.id.toString()} className={style.message}>\n    {props.text}\n  </div>\n));\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Messages_dialogs__AVLKB\",\"dialogItems\":\"Messages_dialogItems__qxTME\",\"messages\":\"Messages_messages__nktWy\",\"addMessageForm\":\"Messages_addMessageForm__1t2Xz\"};","import { FC } from 'react';\n\nimport { AddMessageForm, MessageFormikInputType } from './AddMessageForm/AddMessageForm';\nimport { DialogItem } from './DialogItem/DialogItem';\nimport {\n  mapDispatchToPropsMessageType,\n  mapStateToPropsMessageType,\n} from './MessagesContainer';\nimport { MessagesItem } from './MessagesItem/MessagesItem';\n\nimport style from 'components/Messages/Messages.module.scss';\n\nexport const Messages: FC<mapStateToPropsMessageType & mapDispatchToPropsMessageType> = ({\n  dialogsPage,\n  addNewMessage,\n}) => {\n  const addNewPost = (data: MessageFormikInputType): void => {\n    console.log(data);\n    if (data.message) {\n      addNewMessage(data.message.trim());\n    } else {\n      console.warn('field is empty');\n    }\n  };\n\n  return (\n    <div className={style.dialogs}>\n      <div className={style.dialogItems}>\n        {dialogsPage.dialogs.map(item => (\n          <DialogItem key={item.id} id={item.id} name={item.name} ava={item.ava} />\n        ))}\n      </div>\n      <div className={style.messages}>\n        <div>\n          {dialogsPage.messages.map(item => (\n            <MessagesItem key={item.id} id={item.id} text={item.text} />\n          ))}\n        </div>\n        <div className={style.addMessageForm}>\n          <AddMessageForm addNewMessageHandle={addNewPost} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ComponentType, FC, ReactElement } from 'react';\n\nimport { connect } from 'react-redux';\nimport { compose, Dispatch } from 'redux';\n\nimport { DialogPT } from './DialogItem/DialogItem';\nimport { Messages } from './Messages';\nimport { MessagePT } from './MessagesItem/MessagesItem';\n\nimport { withAuthRedirect } from 'hoc/withAuthRedirect';\nimport { addTextMessageAC } from 'redux/dialogs_reducer';\nimport { AppStatePT } from 'redux/store_redux';\nimport { selectDialogsPage } from 'utils/selectors/selectors';\n\nconst MessageFunctionalComponent: FC<\n  mapStateToPropsMessageType & mapDispatchToPropsMessageType\n> = ({ addNewMessage, dialogsPage }): ReactElement => (\n  <Messages addNewMessage={addNewMessage} dialogsPage={dialogsPage} />\n);\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsMessageType => ({\n  dialogsPage: selectDialogsPage(state),\n  // isAuth: selectAuth(state), // add\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsMessageType => ({\n  addNewMessage: (value: string) => dispatch(addTextMessageAC({ value })),\n});\n\nconst MessagesContainer = compose<ComponentType>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect,\n)(MessageFunctionalComponent);\n\nexport default MessagesContainer;\n\nexport type mapStateToPropsMessageType = {\n  dialogsPage: dialogsItemsPT;\n  // isAuth: boolean;\n};\n\nexport type dialogsItemsPT = {\n  dialogs: Array<DialogPT>;\n  messages: Array<MessagePT>;\n  // newText: string\n};\nexport type mapDispatchToPropsMessageType = {\n  addNewMessage: (value: string) => void;\n  // changeText: (newText: string) => void\n};\n","import { ComponentType, ReactElement } from 'react';\n\nimport {\n  connect,\n  ConnectedComponent,\n  DispatchProp,\n  DistributiveOmit,\n  GetLibraryManagedProps,\n  Shared,\n} from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AppStatePT } from 'redux/store_redux';\n\ntype MapStatePT = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStatePT): MapStatePT => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function withAuthRedirect<T>(\n  Component: ComponentType<T>,\n): ConnectedComponent<\n  (props: MapStatePT) => ReactElement,\n  DistributiveOmit<\n    GetLibraryManagedProps<(props: MapStatePT) => ReactElement>,\n    keyof Shared<\n      MapStatePT & DispatchProp,\n      GetLibraryManagedProps<(props: MapStatePT) => ReactElement>\n    >\n  >\n> {\n  //  <T> не работает со стрелочными функциями\n\n  const RedirectComponent = (props: MapStatePT): ReactElement => {\n    const { isAuth, ...restProps } = props; // Достаём isAuth, т.к. нам не нужно его передавать в компоненту\n\n    if (!isAuth) {\n      return <Navigate to=\"/login\" />;\n    }\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    return <Component {...(restProps as T)} />; // Все что мы закинем сюда, добавит новые ключи в конечной компоненте\n  };\n\n  // let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n  return connect(mapStateToProps)(RedirectComponent);\n}\n","import { createSelector } from 'reselect';\n\nimport { dialogsItemsPT } from 'components/Messages/MessagesContainer';\nimport { UsersStatePT } from 'components/Users/UsersContainer';\nimport { ProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport const selectUsers = (state: AppStatePT): UsersStatePT => state.users; // примитивный селектор\n\nexport const selectUsersSuper = createSelector(\n  selectUsers,\n  users =>\n    // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\n    users, // здесь может быть сложная фильтрация\n);\n\nexport const selectProfilePage = (state: AppStatePT): ProfileType =>\n  state.profilePage.profile;\nexport const selectProfilePageStatus = (state: AppStatePT): string =>\n  state.profilePage.status;\nexport const selectAuthorisedUserID = (state: AppStatePT): string =>\n  state.auth.data.id.toString();\nexport const selectDialogsPage = (state: AppStatePT): dialogsItemsPT => state.dialogsPage;\n// export const selectAuth = (state: AppStatePT): boolean => state.auth.isAuth;\nexport const selectIsAuth = (state: AppStatePT): { isAuth: boolean } => ({\n  isAuth: state.auth.isAuth,\n});\nexport const selectCaptcha = (state: AppStatePT): { captchaURL: string } => ({\n  captchaURL: state.auth.captchaURL,\n});\n"],"names":["AddMessageForm","addNewMessageHandle","formik","useFormik","initialValues","message","onSubmit","values","resetForm","handleSubmit","TextField","id","name","label","type","variant","onChange","handleChange","value","Button","DialogItem","memo","props","className","style","alt","src","ava","title","toString","to","MessagesItem","text","Messages","dialogsPage","addNewMessage","dialogs","map","item","messages","data","console","log","trim","warn","compose","connect","state","selectDialogsPage","dispatch","addTextMessageAC","withAuthRedirect","mapStateToProps","isAuth","auth","Component","restProps","selectUsersSuper","createSelector","users","selectProfilePage","profilePage","profile","selectProfilePageStatus","status","selectAuthorisedUserID","selectIsAuth","selectCaptcha","captchaURL"],"sourceRoot":""}