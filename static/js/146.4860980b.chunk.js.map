{"version":3,"file":"static/js/146.4860980b.chunk.js","mappings":"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","sources":["webpack://socialnetwork/./src/components/Profile/Content/Content_header/Content_header.module.scss?23e3","components/Profile/Content/Content_header/ProfileDataInfo.tsx","webpack://socialnetwork/./src/components/Profile/Content/Content_header/ProfileDataInfoForm.module.css?cdaf","components/Profile/Content/Content_header/ProfileDataInfoForm.tsx","components/Profile/Content/Content_header/ProfileData/ProfileData.tsx","webpack://socialnetwork/./src/components/Profile/Content/Content_header/SetAvatarImage.module.scss?8d44","components/Profile/Content/Content_header/SetAvatarImage.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/Content/Content_header/ContentHeader.tsx","webpack://socialnetwork/./src/components/Profile/Content/Posts/Old_post/Old_Post.module.scss?99d0","components/Profile/Content/Posts/Old_post/OldPost.tsx","components/Profile/Content/Posts/PostsForm/PostsForm.tsx","webpack://socialnetwork/./src/components/Profile/Content/Posts/Posts.module.scss?40b0","components/Profile/Content/Posts/Posts.tsx","components/Profile/Content/Posts/PostsContainer.tsx","webpack://socialnetwork/./src/components/Profile/Profile.module.scss?4008","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","utils/withRouter/WithRouter.tsx","hoc/withAuthRedirect.tsx","utils/selectors/selectors.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Content_header_content__Y6mHP\",\"avatar\":\"Content_header_avatar__MSBGo\",\"contacts\":\"Content_header_contacts__Le4a-\"};","import { ReactElement } from 'react';\n\nimport style from 'components/Profile/Content/Content_header/Content_header.module.scss';\nimport { ContactsType, ProfileType } from 'redux/profile_reducer';\n\ntype ProfileDataInfoType = {\n  profile: ProfileType;\n};\n\nexport const ProfileDataInfo = ({ profile }: ProfileDataInfoType): ReactElement => {\n  const arr = Object.keys(profile.contacts) as Array<keyof ContactsType>;\n\n  return (\n    <div>\n      <div>\n        <div>\n          <b>fullName:</b> {profile.fullName}\n        </div>\n        <div>\n          <b>about me:</b> {profile.aboutMe}\n        </div>\n        <div>\n          <b>lookingForAJob:</b> {`${profile.lookingForAJob}`}\n        </div>\n        <div>\n          <b>lookingForAJobDescription:</b> {`${profile.lookingForAJobDescription}`}\n        </div>\n        <b>Contacts:</b>\n      </div>\n      <div className={style.contacts}>\n        {arr.map(el => (\n          <div key={el}>\n            <b>{el}:</b> {profile.contacts[el]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ProfileDataInfoForm_main__vekWU\",\"item\":\"ProfileDataInfoForm_item__NdOuV\",\"error\":\"ProfileDataInfoForm_error__yG6NE\"};","import { FC } from 'react';\n\nimport { useFormik } from 'formik';\n\nimport style from './ProfileDataInfoForm.module.css';\n\nimport { Button } from 'components/comonComponents/Button/Button';\nimport { ContactsType, ProfileDataType, ProfileType } from 'redux/profile_reducer';\n\nexport const ProfileDataInfoForm: FC<ProfileDataInfoFormPropsType> = ({\n  initialState,\n  setProfileData,\n}) => {\n  const formik = useFormik({\n    initialValues: initialState,\n    onSubmit: values => {\n      setProfileData(values);\n      formik.resetForm();\n    },\n  });\n\n  const arr = Object.keys(initialState.contacts) as Array<keyof ContactsType>;\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <div>\n          <div>\n            <b>lookingForAJob:</b>\n            <input\n              id=\"lookingForAJob\"\n              name=\"lookingForAJob\"\n              type=\"checkbox\"\n              placeholder=\"some text\"\n              onChange={formik.handleChange}\n              defaultChecked={formik.values.lookingForAJob}\n            />\n          </div>\n          <div>\n            <b>lookingForAJobDescription:</b>\n            <input\n              id=\"lookingForAJobDescription\"\n              name=\"lookingForAJobDescription\"\n              type=\"lookingForAJobDescription\"\n              placeholder=\"some text\"\n              onChange={formik.handleChange}\n              value={formik.values.lookingForAJobDescription}\n            />\n          </div>\n          <div>\n            <b>fullName:</b>\n            <input\n              id=\"fullName\"\n              name=\"fullName\"\n              type=\"fullName\"\n              placeholder=\"some text\"\n              onChange={formik.handleChange}\n              value={formik.values.fullName}\n            />\n          </div>\n          <div>\n            <b>about me:</b>\n            <input\n              id=\"aboutMe\"\n              name=\"aboutMe\"\n              type=\"aboutMe\"\n              placeholder=\"some text\"\n              onChange={formik.handleChange}\n              value={formik.values.aboutMe}\n            />\n          </div>\n        </div>\n        <b>Contacts:</b>\n        <div>\n          {arr.map(el => (\n            <div className={style.item} key={el}>\n              <b>{el}:</b>\n              <input\n                id={el.toString()}\n                name={el.toString()}\n                type={el.toString()}\n                placeholder=\"some text\"\n                onChange={formik.handleChange}\n                defaultValue={formik.values.contacts[el]}\n                value={formik.values.contacts[el]}\n              />\n            </div>\n          ))}\n        </div>\n        <Button name=\"save\" type=\"submit\" />\n      </form>\n    </div>\n  );\n};\ntype ProfileDataInfoFormPropsType = {\n  initialState: ProfileType;\n  setProfileData: (props: ProfileDataType) => void;\n};\n","import { ReactElement } from 'react';\n\nimport { ProfileDataInfo } from 'components/Profile/Content/Content_header/ProfileDataInfo';\nimport { ProfileDataInfoForm } from 'components/Profile/Content/Content_header/ProfileDataInfoForm';\nimport { ProfileDataType } from 'redux/profile_reducer';\n\nexport const ProfileData = ({\n  profileData,\n  editMod,\n  initialState,\n}: {\n  editMod: boolean;\n  initialState: ProfileDataType & {\n    userId: number;\n    photos: { small: string; large: string };\n  };\n  profileData: (props: ProfileDataType) => void;\n}): ReactElement => (\n  <div>\n    {editMod ? (\n      <ProfileDataInfoForm initialState={initialState} setProfileData={profileData} />\n    ) : (\n      <ProfileDataInfo profile={initialState} />\n    )}\n  </div>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"SetAvatarImage_item__PQvaR\"};","import React, { FC, memo, ReactElement } from 'react';\n\nimport style from './SetAvatarImage.module.scss';\n\ntype AvatarImageType = {\n  userId: string;\n  onChangeHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const SetAvatarImage: FC<AvatarImageType> = memo(\n  ({ userId, onChangeHandler }): ReactElement => (\n    <div>\n      {!userId && (\n        <div>\n          <label htmlFor=\"set-file\" className={style.item}>\n            <input id=\"set-file\" type=\"file\" onChange={onChangeHandler} />\n          </label>\n        </div>\n      )}\n    </div>\n  ),\n);\n","import { ChangeEvent, FC, memo, useEffect, useState } from 'react';\n\ntype ProfileStatusPT = {\n  status: string;\n  updateUserStatus: (status: string) => void;\n};\n\nexport const ProfileStatusWithHooks: FC<ProfileStatusPT> = memo(\n  ({ status, updateUserStatus }) => {\n    const defaultStatus = status || 'default';\n\n    const [editMod, setEditMod] = useState<boolean>(false);\n    const [statusText, setStatusText] = useState<string>(defaultStatus);\n\n    useEffect(() => {\n      if (status === '') {\n        setStatusText('default');\n      } else {\n        setStatusText(status);\n      }\n    }, [status]);\n\n    const setEditModTrue = (): void => {\n      setEditMod(true);\n    };\n\n    const setEditModFalse = (): void => {\n      setEditMod(false);\n      if (statusText) {\n        updateUserStatus(statusText);\n      }\n    };\n    const changeTextHandle = (e: ChangeEvent<HTMLInputElement>): void => {\n      setStatusText(e.currentTarget.value);\n    };\n\n    return (\n      <div>\n        <div>\n          My status:\n          {editMod ? (\n            <input\n              maxLength={20}\n              onBlur={setEditModFalse}\n              type=\"text\"\n              onChange={changeTextHandle}\n              value={statusText}\n            />\n          ) : (\n            <h4 onDoubleClick={setEditModTrue}>{defaultStatus}</h4>\n          )}\n          <div>Click for change</div>\n        </div>\n      </div>\n    );\n  },\n);\n","import { ChangeEvent, FC, useCallback, useState } from 'react';\n\nimport stockAva from '../../../Users/imgAva/user.png';\nimport { ContentHeaderPT } from '../../Profile';\n\nimport { Button } from 'components/comonComponents/Button/Button';\nimport { Preloader } from 'components/comonComponents/Preloader';\nimport style from 'components/Profile/Content/Content_header/Content_header.module.scss';\nimport { ProfileData } from 'components/Profile/Content/Content_header/ProfileData/ProfileData';\nimport { SetAvatarImage } from 'components/Profile/Content/Content_header/SetAvatarImage';\nimport { ProfileStatusWithHooks } from 'components/Profile/ProfileStatus/ProfileStatusWithHooks';\nimport { ProfileDataType } from 'redux/profile_reducer';\nimport { CommonConstants } from 'utils/enum/enum';\n\nexport const ContentHeader: FC<ContentHeaderPT> = ({\n  profile,\n  updateUserStatus,\n  status,\n  userId,\n  savePhoto,\n  setProfileData,\n}) => {\n  const [editMod, setEditMod] = useState<boolean>(false);\n\n  const onMainPhotoSelected = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\n    if (e.target.files) {\n      savePhoto(e.target.files[CommonConstants.zero]);\n    }\n  }, []);\n\n  const setEditModHandle = (): void => {\n    setEditMod(!editMod);\n  };\n\n  const setProfileDataCB = (props: ProfileDataType): void => {\n    setProfileData(props, `${profile.userId}`, setEditMod);\n  };\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className={style.content}>\n      <div className={style.avatar}>\n        <div>\n          <img alt=\"ava\" src={profile.photos.large || stockAva} />\n          <SetAvatarImage userId={userId} onChangeHandler={onMainPhotoSelected} />\n        </div>\n        <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus} />\n      </div>\n      <div className={style.contacts}>\n        {!userId && (\n          <Button name=\"edit data\" disabled={editMod} onClick={setEditModHandle} />\n        )}\n        <ProfileData\n          editMod={editMod}\n          initialState={profile}\n          profileData={setProfileDataCB}\n        />\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Old_Post_content__mdF8T\",\"contentButtons\":\"Old_Post_contentButtons__nUcN7\",\"avatar\":\"Old_Post_avatar__eDzkJ\",\"items\":\"Old_Post_items__Y9J6R\",\"item\":\"Old_Post_item__uSTdV\"};","import React, { memo } from 'react';\n\nimport chatImage from '../../../../../common/assets/images/chatImage.png';\n\nimport { Button } from 'components/comonComponents/Button/Button';\nimport style from 'components/Profile/Content/Posts/Old_post/Old_Post.module.scss';\n\ntype OldPostPT = {\n  id: string;\n  message: string;\n  like: number;\n  comment: number;\n  addLike: (postID: string) => void;\n};\n\nexport const OldPost = memo(({ message, like, comment, addLike, id }: OldPostPT) => {\n  const addLikeHandle = (): void => addLike(id);\n\n  return (\n    <div className={style.content}>\n      <div className={style.items}>\n        <img alt=\"@\" className={style.avatar} src={chatImage} />\n        <span className={style.item}>{message}</span>\n      </div>\n      <div className={style.contentButtons}>\n        <Button name={`Like ${like}`} type=\"button\" onClick={addLikeHandle} />\n        <Button name={`Comment ${comment}`} type=\"button\" />\n      </div>\n    </div>\n  );\n});\n","import { ReactElement } from 'react';\n\nimport { TextField } from '@mui/material';\nimport { useFormik } from 'formik';\n\nimport { Button } from 'components/comonComponents/Button/Button';\n\nexport type PostsReduxFormType = {\n  textPost: string;\n};\n\ntype addNewPostHandleType = {\n  addNewPostHandle: (data: PostsReduxFormType) => void;\n};\n\nexport const PostForm = ({ addNewPostHandle }: addNewPostHandleType): ReactElement => {\n  const formik = useFormik({\n    initialValues: {\n      textPost: '',\n    },\n    onSubmit: values => {\n      addNewPostHandle(values);\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <TextField\n          id=\"textPost\"\n          label=\"Posts\"\n          type=\"text\"\n          variant=\"standard\"\n          onChange={formik.handleChange}\n          value={formik.values.textPost}\n        />\n      </div>\n      <div>\n        <Button name=\"Add post\" type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Posts_content__sNbL4\"};","import React, { memo, useCallback } from 'react';\n\nimport { OldPost } from './Old_post/OldPost';\nimport { PostForm, PostsReduxFormType } from './PostsForm/PostsForm';\n\nimport style from 'components/Profile/Content/Posts/Posts.module.scss';\nimport { initialStateProfileType } from 'redux/profile_reducer';\n\nexport type NewPostPT = {\n  profilePage: initialStateProfileType;\n  addPostAC: (value: { value: string }) => void;\n  addLikeAC: (value: { postID: string }) => void;\n};\n\nexport const Posts = memo(({ profilePage, addPostAC, addLikeAC }: NewPostPT) => {\n  const addNewItem = (data: PostsReduxFormType): void => {\n    if (data.textPost) {\n      addPostAC({ value: data.textPost.trim() });\n    }\n  };\n\n  const addLikeHandle = useCallback((postID: string) => {\n    addLikeAC({ postID });\n  }, []);\n\n  return (\n    <div className={style.content}>\n      <PostForm addNewPostHandle={addNewItem} />\n      {profilePage.postData.map(({ id, like, comment, message }) => (\n        <OldPost\n          key={id}\n          id={id}\n          addLike={addLikeHandle}\n          message={message}\n          like={like}\n          comment={comment}\n        />\n      ))}\n    </div>\n  );\n});\n","import { connect } from 'react-redux';\n\nimport { Posts } from './Posts';\n\nimport { addLikeAC, addPostAC, initialStateProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport type profilePagePT = {\n  profilePage: initialStateProfileType;\n};\n\nconst mapStateToProps = (state: AppStatePT): profilePagePT => ({\n  profilePage: state.profilePage,\n});\n\nconst obj = { addPostAC, addLikeAC };\n\nexport const PostsContainer = connect(mapStateToProps, obj)(Posts);\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Profile_main__7D-MI\"};","import React, { memo } from 'react';\n\nimport { ContentHeader } from './Content/Content_header/ContentHeader';\nimport { PostsContainer } from './Content/Posts/PostsContainer';\n\nimport style from 'components/Profile/Profile.module.scss';\nimport { ProfileDataType, ProfileType } from 'redux/profile_reducer';\n\nexport type ContentHeaderPT = {\n  userId: string;\n  savePhoto: (file: File) => void;\n  profile: ProfileType;\n  status: string;\n  updateUserStatus: (status: string) => void;\n  setProfileData: (\n    data: ProfileDataType,\n    userId: string,\n    setEditMod: (value: boolean) => void,\n  ) => void;\n};\n\nexport const Profile = memo((props: ContentHeaderPT) => (\n  <div className={style.main}>\n    <ContentHeader\n      profile={props.profile}\n      savePhoto={props.savePhoto}\n      userId={props.userId}\n      status={props.status}\n      setProfileData={props.setProfileData}\n      updateUserStatus={props.updateUserStatus}\n    />\n    <PostsContainer />\n  </div>\n));\n","import { Component, ComponentType, ReactElement } from 'react';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { Profile } from './Profile';\n\nimport { withAuthRedirect } from 'hoc/withAuthRedirect';\nimport {\n  ProfileDataType,\n  ProfileType,\n  putPhotoTC,\n  setProfileDataTC,\n  setUserStatusTC,\n  setUserTC,\n  updateUserStatusTC,\n} from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\nimport {\n  selectAuthorisedUserID,\n  selectProfilePage,\n  selectProfilePageStatus,\n} from 'utils/selectors/selectors';\nimport { withRouter } from 'utils/withRouter/WithRouter';\n\ntype PathParamPT = {\n  userId: string;\n};\n\nexport class ProfileContainerAPI extends Component<\n  mapStateToPropsPT & mapDispatchToPropsType & { params: PathParamPT }\n> {\n  componentDidMount(): void {\n    const { setUserStatus, setUser, authorisedUserID, params } = this.props;\n\n    let userID = params.userId;\n    if (!userID) {\n      userID = authorisedUserID;\n    }\n    setUser(userID);\n    setUserStatus(userID);\n  }\n\n  render(): ReactElement {\n    const { profile, setProfileData, updateUserStatus, status, params, setPhoto } =\n      this.props;\n\n    return (\n      <Profile\n        userId={params.userId}\n        profile={profile}\n        status={status}\n        savePhoto={setPhoto}\n        setProfileData={setProfileData}\n        updateUserStatus={updateUserStatus}\n      />\n    );\n  }\n}\n\ntype mapStateToPropsPT = {\n  profile: ProfileType;\n  status: string;\n  authorisedUserID: string;\n};\n\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsPT => ({\n  profile: selectProfilePage(state),\n  status: selectProfilePageStatus(state),\n  authorisedUserID: selectAuthorisedUserID(state),\n});\n\ntype mapDispatchToPropsType = {\n  setUser: (useId: string) => void;\n  setUserStatus: (status: string) => void;\n  updateUserStatus: (status: string) => void;\n  setPhoto: (file: File) => void;\n  setProfileData: (\n    data: ProfileDataType,\n    userId: string,\n    setEditMod: (value: boolean) => void,\n  ) => void;\n};\nconst mapDispatchToProps: mapDispatchToPropsType = {\n  setUser: setUserTC,\n  setUserStatus: setUserStatusTC,\n  updateUserStatus: updateUserStatusTC,\n  setPhoto: putPhotoTC,\n  setProfileData: setProfileDataTC,\n};\n\nconst ProfileContainer = compose<ComponentType>(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps),\n  withRouter,\n)(ProfileContainerAPI);\n\nexport default ProfileContainer;\n","import { Component } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nexport const withRouter = (WrappedComponent: typeof Component) => (props: object) => {\n  const params = useParams(); // useParams возвращает объект пары key/value (ключ/значение) параметров URL.\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <WrappedComponent {...props} params={params} />;\n};\n","import { ComponentType, ReactElement } from 'react';\n\nimport {\n  connect,\n  ConnectedComponent,\n  DispatchProp,\n  DistributiveOmit,\n  GetLibraryManagedProps,\n  Shared,\n} from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AppStatePT } from 'redux/store_redux';\n\ntype MapStatePT = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStatePT): MapStatePT => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function withAuthRedirect<T>(\n  Component: ComponentType<T>,\n): ConnectedComponent<\n  (props: MapStatePT) => ReactElement,\n  DistributiveOmit<\n    GetLibraryManagedProps<(props: MapStatePT) => ReactElement>,\n    keyof Shared<\n      MapStatePT & DispatchProp,\n      GetLibraryManagedProps<(props: MapStatePT) => ReactElement>\n    >\n  >\n> {\n  //  <T> не работает со стрелочными функциями\n\n  const RedirectComponent = (props: MapStatePT): ReactElement => {\n    const { isAuth, ...restProps } = props; // Достаём isAuth, т.к. нам не нужно его передавать в компоненту\n\n    if (!isAuth) {\n      return <Navigate to=\"/login\" />;\n    }\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    return <Component {...(restProps as T)} />; // Все что мы закинем сюда, добавит новые ключи в конечной компоненте\n  };\n\n  // let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n  return connect(mapStateToProps)(RedirectComponent);\n}\n","import { createSelector } from 'reselect';\n\nimport { dialogsItemsPT } from 'components/Messages/MessagesContainer';\nimport { UsersStatePT } from 'components/Users/UsersContainer';\nimport { ProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport const selectUsers = (state: AppStatePT): UsersStatePT => state.users; // примитивный селектор\n\nexport const selectUsersSuper = createSelector(\n  selectUsers,\n  users =>\n    // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\n    users, // здесь может быть сложная фильтрация\n);\n\nexport const selectProfilePage = (state: AppStatePT): ProfileType =>\n  state.profilePage.profile;\nexport const selectProfilePageStatus = (state: AppStatePT): string =>\n  state.profilePage.status;\nexport const selectAuthorisedUserID = (state: AppStatePT): string =>\n  state.auth.data.id.toString();\nexport const selectDialogsPage = (state: AppStatePT): dialogsItemsPT => state.dialogsPage;\n// export const selectAuth = (state: AppStatePT): boolean => state.auth.isAuth;\nexport const selectIsAuth = (state: AppStatePT): { isAuth: boolean } => ({\n  isAuth: state.auth.isAuth,\n});\nexport const selectCaptcha = (state: AppStatePT): { captchaURL: string } => ({\n  captchaURL: state.auth.captchaURL,\n});\n"],"names":["ProfileDataInfo","profile","arr","Object","keys","contacts","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","className","style","map","el","ProfileDataInfoForm","initialState","setProfileData","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","id","name","type","placeholder","onChange","handleChange","defaultChecked","value","toString","defaultValue","Button","ProfileData","profileData","editMod","SetAvatarImage","memo","userId","onChangeHandler","htmlFor","ProfileStatusWithHooks","status","updateUserStatus","defaultStatus","useState","setEditMod","statusText","setStatusText","useEffect","maxLength","onBlur","e","currentTarget","onDoubleClick","ContentHeader","savePhoto","onMainPhotoSelected","useCallback","target","files","CommonConstants","alt","src","photos","large","stockAva","disabled","onClick","props","Preloader","OldPost","message","like","comment","addLike","PostForm","addNewPostHandle","textPost","TextField","label","variant","Posts","profilePage","addPostAC","addLikeAC","addLikeHandle","postID","data","trim","postData","obj","PostsContainer","connect","state","Profile","ProfileContainerAPI","this","setUserStatus","setUser","authorisedUserID","userID","params","setPhoto","Component","mapDispatchToProps","setUserTC","setUserStatusTC","updateUserStatusTC","putPhotoTC","setProfileDataTC","compose","withAuthRedirect","selectProfilePage","selectProfilePageStatus","selectAuthorisedUserID","WrappedComponent","useParams","mapStateToProps","isAuth","auth","restProps","to","selectUsersSuper","createSelector","users","selectDialogsPage","dialogsPage","selectIsAuth","selectCaptcha","captchaURL"],"sourceRoot":""}