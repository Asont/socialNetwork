{"version":3,"file":"static/js/770.4907e216.chunk.js","mappings":"iMACA,EAAgC,6BAAhC,EAAqE,qB,uCCArE,EAAuB,wB,SCyBVA,EAAoC,SAAC,GAG7B,IAFnBC,EAEkB,EAFlBA,gBACAC,EACkB,EADlBA,WAEMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZN,WAAY,IAEdO,SAAU,SAAAC,GACRT,EAAgBS,EACjB,IAGH,OACE,gBAAKC,UAAWC,EAAhB,UACE,kBAAMH,SAAUN,EAAOU,aAAvB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,KAAK,QACLC,QAAQ,WACRC,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOO,OAAOJ,WAGzB,SAACQ,EAAA,EAAD,CACEC,GAAG,WACHC,KAAK,WACLE,KAAK,WACLD,MAAM,WACNE,QAAQ,WACRC,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOO,OAAOH,YAEvB,4BACE,SAACgB,EAAA,EAAD,CACER,GAAG,WACHC,KAAK,WACLI,SAAUjB,EAAOkB,aACjBG,eAAgBrB,EAAOO,OAAOF,aAC7B,IANL,iBAUCN,IACC,4BACE,gBAAKuB,IAAI,UAAUC,IAAKxB,KACxB,0BACE,kBACEa,GAAG,aACHC,KAAK,aACLE,KAAK,OACLE,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOO,OAAOR,mBAK7B,mBAAQS,UAAWgB,EAAAA,EAAAA,KAAkBT,KAAK,SAA1C,uBAMP,E,mBCvDKU,EAA6C,CACjD3B,gBAAiB4B,EAAAA,IAKnB,GAFcC,EAAAA,EAAAA,KAbU,SAACC,GAAD,eAAC,WACpBC,EAAAA,EAAAA,IAAaD,KACbE,EAAAA,EAAAA,IAAcF,GAFK,GAaeH,EAAzBE,EA/B2D,SAAC,GAIrD,IAHnB7B,EAGkB,EAHlBA,gBACAiC,EAEkB,EAFlBA,OACAhC,EACkB,EADlBA,WAEA,OAAIgC,GAAe,SAAC,KAAD,CAAUC,GAAG,cAE9B,iBAAKxB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,oBACA,wDACA,6CACA,SAACZ,EAAD,CAAWC,gBAAiBA,EAAiBC,WAAYA,MAG9D,G,2MClBYkC,GAAmBC,E,QAAAA,KAFL,SAACN,GAAD,OAAqCA,EAAMO,KAA3C,IAIzB,SAAAA,GAAK,OACH,CADG,IAKMC,EAAoB,SAACR,GAAD,OAC/BA,EAAMS,YAAYC,OADa,EAEpBC,EAA0B,SAACX,GAAD,OACrCA,EAAMS,YAAYG,MADmB,EAE1BC,EAAyB,SAACb,GAAD,OACpCA,EAAMc,KAAKC,KAAK/B,GAAGgC,UADiB,EAEzBC,EAAoB,SAACjB,GAAD,OAAuCA,EAAMkB,WAA7C,EAEpBjB,EAAe,SAACD,GAAD,MAA6C,CACvEG,OAAQH,EAAMc,KAAKX,OADO,EAGfD,EAAgB,SAACF,GAAD,MAAgD,CAC3E7B,WAAY6B,EAAMc,KAAK3C,WADI,C","sources":["webpack://socialnetwork/./src/components/Login/Login.module.scss?4086","webpack://socialnetwork/./src/components/Login/LoginForm/LoginForm.module.scss?ebd6","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","utils/selectors/selectors.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"Login_formContainer__UQLD-\",\"title\":\"Login_title__hvVkB\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__dEZUL\",\"errorMessage\":\"LoginForm_errorMessage__CxgtB\"};","import { FC, ReactElement } from 'react';\n\nimport { Checkbox, TextField } from '@mui/material';\nimport { useFormik } from 'formik';\n\nimport styleButton from '../../comonComponents/Button/Button.module.scss';\n\nimport style from './LoginForm.module.scss';\n\nimport { loginAPIRequestType } from 'api/api';\n\nexport type FormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captchaURL: string;\n};\n\nexport type LoginFormPropsType = {\n  setLoginHandler: (userData: loginAPIRequestType) => void;\n  captchaURL: string;\n};\n\n// <form onSubmit={props.handleSubmit}>  метод из redux form,\n// который собирает данные из Fields\n\nexport const LoginForm: FC<LoginFormPropsType> = ({\n  setLoginHandler,\n  captchaURL,\n}): ReactElement => {\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: true,\n      captchaURL: '',\n    },\n    onSubmit: values => {\n      setLoginHandler(values);\n    },\n  });\n\n  return (\n    <div className={style.form}>\n      <form onSubmit={formik.handleSubmit}>\n        <div>\n          <TextField\n            id=\"email\"\n            name=\"email\"\n            label=\"Email\"\n            type=\"email\"\n            variant=\"standard\"\n            onChange={formik.handleChange}\n            value={formik.values.email}\n          />\n        </div>\n        <TextField\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          variant=\"standard\"\n          onChange={formik.handleChange}\n          value={formik.values.password}\n        />\n        <div>\n          <Checkbox\n            id=\"checkbox\"\n            name=\"checkbox\"\n            onChange={formik.handleChange}\n            defaultChecked={formik.values.rememberMe}\n          />{' '}\n          Remember Me\n        </div>\n\n        {captchaURL && (\n          <div>\n            <img alt=\"captcha\" src={captchaURL} />\n            <div>\n              <input\n                id=\"captchaURL\"\n                name=\"captchaURL\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                value={formik.values.captchaURL}\n              />\n            </div>\n          </div>\n        )}\n        <button className={styleButton.item} type=\"submit\">\n          Login\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { FC, ReactElement } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport style from './Login.module.scss';\nimport { LoginForm } from './LoginForm/LoginForm';\n\nimport { loginAPIRequestType } from 'api/api';\nimport { setLoginTC } from 'redux/auth_reducer';\nimport { AppStatePT } from 'redux/store_redux';\nimport { selectCaptcha, selectIsAuth } from 'utils/selectors/selectors';\n\nconst LoginContainer: FC<mapDispatchToPropsType & mapStateToPropsType> = ({\n  setLoginHandler,\n  isAuth,\n  captchaURL,\n}): ReactElement => {\n  if (isAuth) return <Navigate to=\"/profile\" />;\n  return (\n    <div className={style.formContainer}>\n      <div className={style.title}>LOGIN</div>\n      <div>Email: free@samuraijs.com</div>\n      <div>Password: free</div>\n      <LoginForm setLoginHandler={setLoginHandler} captchaURL={captchaURL} />\n    </div>\n  );\n};\n\ntype mapStateToPropsType = { isAuth: boolean; captchaURL: string };\n\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsType => ({\n  ...selectIsAuth(state),\n  ...selectCaptcha(state),\n});\n\ntype mapDispatchToPropsType = {\n  setLoginHandler: (userData: loginAPIRequestType) => void;\n};\n\nconst mapDispatchToProps: mapDispatchToPropsType = {\n  setLoginHandler: setLoginTC,\n};\n\nconst Login = connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nexport default Login;\n","import { createSelector } from 'reselect';\n\nimport { dialogsItemsPT } from 'components/Messages/MessagesContainer';\nimport { UsersStatePT } from 'components/Users/UsersContainer';\nimport { ProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport const selectUsers = (state: AppStatePT): UsersStatePT => state.users; // примитивный селектор\n\nexport const selectUsersSuper = createSelector(\n  selectUsers,\n  users =>\n    // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\n    users, // здесь может быть сложная фильтрация\n);\n\nexport const selectProfilePage = (state: AppStatePT): ProfileType =>\n  state.profilePage.profile;\nexport const selectProfilePageStatus = (state: AppStatePT): string =>\n  state.profilePage.status;\nexport const selectAuthorisedUserID = (state: AppStatePT): string =>\n  state.auth.data.id.toString();\nexport const selectDialogsPage = (state: AppStatePT): dialogsItemsPT => state.dialogsPage;\n// export const selectAuth = (state: AppStatePT): boolean => state.auth.isAuth;\nexport const selectIsAuth = (state: AppStatePT): { isAuth: boolean } => ({\n  isAuth: state.auth.isAuth,\n});\nexport const selectCaptcha = (state: AppStatePT): { captchaURL: string } => ({\n  captchaURL: state.auth.captchaURL,\n});\n"],"names":["LoginForm","setLoginHandler","captchaURL","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","className","style","handleSubmit","TextField","id","name","label","type","variant","onChange","handleChange","value","Checkbox","defaultChecked","alt","src","styleButton","mapDispatchToProps","setLoginTC","connect","state","selectIsAuth","selectCaptcha","isAuth","to","selectUsersSuper","createSelector","users","selectProfilePage","profilePage","profile","selectProfilePageStatus","status","selectAuthorisedUserID","auth","data","toString","selectDialogsPage","dialogsPage"],"sourceRoot":""}